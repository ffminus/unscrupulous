[package]
name         = "unscrupulous"
version      = "0.1.0"
authors      = ["ffminus <ffminus@protonmail.com"]
edition      = "2021"
description  = "Types that do not care about provenance."
readme       = "README.md"
repository   = "https://github.com/ffminus/unscrupulous"
license      = "MIT"
keywords     = ["marker", "memory", "no_std"]
categories   = ["memory-management", "no-std", "no-std::no-alloc"]


[features]
derive = ["dep:unscrupulous_derive"]


[dependencies]
# Derive macro to implement `Unscrupulous` on composite types
unscrupulous_derive = { version = "0.1.0", optional = true }


[lints.clippy]
cargo    = "warn"
nursery  = "warn"
pedantic = "warn"

doc_markdown = { level = "allow", priority = 1 }

[lints.rustdoc]
missing_crate_level_docs = "warn"
private_doc_tests        = "warn"
unescaped_backticks      = "warn"

[lints.rust]
rust-2021-compatibility = "warn"

absolute_paths_not_starting_with_crate = "warn"
explicit_outlives_requirements         = "warn"
ffi_unwind_calls                       = "warn"
let_underscore_drop                    = "warn"
macro_use_extern_crate                 = "warn"
meta_variable_misuse                   = "warn"
missing_abi                            = "warn"
missing_docs                           = "warn"
non_ascii_idents                       = "warn"
pointer_structural_match               = "warn"
single_use_lifetimes                   = "warn"
trivial_casts                          = "warn"
trivial_numeric_casts                  = "warn"
unsafe_op_in_unsafe_fn                 = "warn"
unused_extern_crates                   = "warn"
unused_import_braces                   = "warn"
unused_lifetimes                       = "warn"
unused_macro_rules                     = "warn"
unused_qualifications                  = "warn"
unused_results                         = "warn"
variant_size_differences               = "warn"
